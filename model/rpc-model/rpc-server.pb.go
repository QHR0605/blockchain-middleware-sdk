// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: rpc-server.proto

package rpc_model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillCode       string `protobuf:"bytes,1,opt,name=bill_code,json=billCode,proto3" json:"bill_code,omitempty"`
	BillNumber     string `protobuf:"bytes,2,opt,name=bill_number,json=billNumber,proto3" json:"bill_number,omitempty"`
	CheckCode      string `protobuf:"bytes,3,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	IssueDate      string `protobuf:"bytes,4,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	PayerPartyName string `protobuf:"bytes,5,opt,name=payer_party_name,json=payerPartyName,proto3" json:"payer_party_name,omitempty"`
	PayerPartyCode string `protobuf:"bytes,6,opt,name=payer_party_code,json=payerPartyCode,proto3" json:"payer_party_code,omitempty"`
}

func (x *QueryCondition) Reset() {
	*x = QueryCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCondition) ProtoMessage() {}

func (x *QueryCondition) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCondition.ProtoReflect.Descriptor instead.
func (*QueryCondition) Descriptor() ([]byte, []int) {
	return file_rpc_server_proto_rawDescGZIP(), []int{0}
}

func (x *QueryCondition) GetBillCode() string {
	if x != nil {
		return x.BillCode
	}
	return ""
}

func (x *QueryCondition) GetBillNumber() string {
	if x != nil {
		return x.BillNumber
	}
	return ""
}

func (x *QueryCondition) GetCheckCode() string {
	if x != nil {
		return x.CheckCode
	}
	return ""
}

func (x *QueryCondition) GetIssueDate() string {
	if x != nil {
		return x.IssueDate
	}
	return ""
}

func (x *QueryCondition) GetPayerPartyName() string {
	if x != nil {
		return x.PayerPartyName
	}
	return ""
}

func (x *QueryCondition) GetPayerPartyCode() string {
	if x != nil {
		return x.PayerPartyCode
	}
	return ""
}

// Bill 开票数据格式详见http://czt.jiangsu.gov.cn/module/download/downfile.jsp?classid=0&filename=961c3e502fd14b0882c9dbde7b0cb73d.pdf
type Bill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocType            string  `protobuf:"bytes,1,opt,name=docType,proto3" json:"docType,omitempty"`
	BillStatus         string  `protobuf:"bytes,2,opt,name=bill_status,json=billStatus,proto3" json:"bill_status,omitempty"`
	BillType           string  `protobuf:"bytes,3,opt,name=bill_type,json=billType,proto3" json:"bill_type,omitempty"`
	MachineId          string  `protobuf:"bytes,4,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty"`
	BillCode           string  `protobuf:"bytes,5,opt,name=bill_code,json=billCode,proto3" json:"bill_code,omitempty"`
	BillNumber         string  `protobuf:"bytes,6,opt,name=bill_number,json=billNumber,proto3" json:"bill_number,omitempty"`
	CheckCode          string  `protobuf:"bytes,7,opt,name=check_code,json=checkCode,proto3" json:"check_code,omitempty"`
	TotalAmount        string  `protobuf:"bytes,8,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	IssueDate          string  `protobuf:"bytes,9,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	InvoiceTime        string  `protobuf:"bytes,10,opt,name=invoice_time,json=invoiceTime,proto3" json:"invoice_time,omitempty"`
	InvoicingPartyCode string  `protobuf:"bytes,11,opt,name=invoicing_party_code,json=invoicingPartyCode,proto3" json:"invoicing_party_code,omitempty"`
	InvoicingPartyName string  `protobuf:"bytes,12,opt,name=invoicing_party_name,json=invoicingPartyName,proto3" json:"invoicing_party_name,omitempty"`
	RecName            string  `protobuf:"bytes,13,opt,name=rec_name,json=recName,proto3" json:"rec_name,omitempty"`
	RecAcct            string  `protobuf:"bytes,14,opt,name=rec_acct,json=recAcct,proto3" json:"rec_acct,omitempty"`
	RecOpBk            string  `protobuf:"bytes,15,opt,name=rec_op_bk,json=recOpBk,proto3" json:"rec_op_bk,omitempty"`
	RecAddress         string  `protobuf:"bytes,16,opt,name=rec_address,json=recAddress,proto3" json:"rec_address,omitempty"`
	PayerPartyType     string  `protobuf:"bytes,17,opt,name=payer_party_type,json=payerPartyType,proto3" json:"payer_party_type,omitempty"`
	PayerPartyCode     string  `protobuf:"bytes,18,opt,name=payer_party_code,json=payerPartyCode,proto3" json:"payer_party_code,omitempty"`
	PayerPartyName     string  `protobuf:"bytes,19,opt,name=payer_party_name,json=payerPartyName,proto3" json:"payer_party_name,omitempty"`
	PayerAcct          string  `protobuf:"bytes,20,opt,name=payer_acct,json=payerAcct,proto3" json:"payer_acct,omitempty"`
	PayerOpBk          string  `protobuf:"bytes,21,opt,name=payer_op_bk,json=payerOpBk,proto3" json:"payer_op_bk,omitempty"`
	PayerAddress       string  `protobuf:"bytes,22,opt,name=payer_address,json=payerAddress,proto3" json:"payer_address,omitempty"`
	ItemCode           string  `protobuf:"bytes,23,opt,name=item_code,json=itemCode,proto3" json:"item_code,omitempty"`
	ItemName           string  `protobuf:"bytes,24,opt,name=item_name,json=itemName,proto3" json:"item_name,omitempty"`
	ItemQuantity       int32   `protobuf:"varint,25,opt,name=item_quantity,json=itemQuantity,proto3" json:"item_quantity,omitempty"`
	ItemUnitPrice      float64 `protobuf:"fixed64,26,opt,name=item_unit_price,json=itemUnitPrice,proto3" json:"item_unit_price,omitempty"`
	ItemUnit           string  `protobuf:"bytes,27,opt,name=item_unit,json=itemUnit,proto3" json:"item_unit,omitempty"`
	ItemAmount         float64 `protobuf:"fixed64,28,opt,name=item_amount,json=itemAmount,proto3" json:"item_amount,omitempty"`
	ItemTaxRate        float64 `protobuf:"fixed64,29,opt,name=item_tax_rate,json=itemTaxRate,proto3" json:"item_tax_rate,omitempty"`
	ItemTaxAmount      float64 `protobuf:"fixed64,30,opt,name=item_tax_amount,json=itemTaxAmount,proto3" json:"item_tax_amount,omitempty"`
	Remarks            string  `protobuf:"bytes,31,opt,name=remarks,proto3" json:"remarks,omitempty"`
	MemoryAddress      string  `protobuf:"bytes,32,opt,name=memory_address,json=memoryAddress,proto3" json:"memory_address,omitempty"`
	HandlingPerson     string  `protobuf:"bytes,33,opt,name=handling_person,json=handlingPerson,proto3" json:"handling_person,omitempty"`
	Checker            string  `protobuf:"bytes,34,opt,name=checker,proto3" json:"checker,omitempty"`
}

func (x *Bill) Reset() {
	*x = Bill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bill) ProtoMessage() {}

func (x *Bill) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bill.ProtoReflect.Descriptor instead.
func (*Bill) Descriptor() ([]byte, []int) {
	return file_rpc_server_proto_rawDescGZIP(), []int{1}
}

func (x *Bill) GetDocType() string {
	if x != nil {
		return x.DocType
	}
	return ""
}

func (x *Bill) GetBillStatus() string {
	if x != nil {
		return x.BillStatus
	}
	return ""
}

func (x *Bill) GetBillType() string {
	if x != nil {
		return x.BillType
	}
	return ""
}

func (x *Bill) GetMachineId() string {
	if x != nil {
		return x.MachineId
	}
	return ""
}

func (x *Bill) GetBillCode() string {
	if x != nil {
		return x.BillCode
	}
	return ""
}

func (x *Bill) GetBillNumber() string {
	if x != nil {
		return x.BillNumber
	}
	return ""
}

func (x *Bill) GetCheckCode() string {
	if x != nil {
		return x.CheckCode
	}
	return ""
}

func (x *Bill) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *Bill) GetIssueDate() string {
	if x != nil {
		return x.IssueDate
	}
	return ""
}

func (x *Bill) GetInvoiceTime() string {
	if x != nil {
		return x.InvoiceTime
	}
	return ""
}

func (x *Bill) GetInvoicingPartyCode() string {
	if x != nil {
		return x.InvoicingPartyCode
	}
	return ""
}

func (x *Bill) GetInvoicingPartyName() string {
	if x != nil {
		return x.InvoicingPartyName
	}
	return ""
}

func (x *Bill) GetRecName() string {
	if x != nil {
		return x.RecName
	}
	return ""
}

func (x *Bill) GetRecAcct() string {
	if x != nil {
		return x.RecAcct
	}
	return ""
}

func (x *Bill) GetRecOpBk() string {
	if x != nil {
		return x.RecOpBk
	}
	return ""
}

func (x *Bill) GetRecAddress() string {
	if x != nil {
		return x.RecAddress
	}
	return ""
}

func (x *Bill) GetPayerPartyType() string {
	if x != nil {
		return x.PayerPartyType
	}
	return ""
}

func (x *Bill) GetPayerPartyCode() string {
	if x != nil {
		return x.PayerPartyCode
	}
	return ""
}

func (x *Bill) GetPayerPartyName() string {
	if x != nil {
		return x.PayerPartyName
	}
	return ""
}

func (x *Bill) GetPayerAcct() string {
	if x != nil {
		return x.PayerAcct
	}
	return ""
}

func (x *Bill) GetPayerOpBk() string {
	if x != nil {
		return x.PayerOpBk
	}
	return ""
}

func (x *Bill) GetPayerAddress() string {
	if x != nil {
		return x.PayerAddress
	}
	return ""
}

func (x *Bill) GetItemCode() string {
	if x != nil {
		return x.ItemCode
	}
	return ""
}

func (x *Bill) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *Bill) GetItemQuantity() int32 {
	if x != nil {
		return x.ItemQuantity
	}
	return 0
}

func (x *Bill) GetItemUnitPrice() float64 {
	if x != nil {
		return x.ItemUnitPrice
	}
	return 0
}

func (x *Bill) GetItemUnit() string {
	if x != nil {
		return x.ItemUnit
	}
	return ""
}

func (x *Bill) GetItemAmount() float64 {
	if x != nil {
		return x.ItemAmount
	}
	return 0
}

func (x *Bill) GetItemTaxRate() float64 {
	if x != nil {
		return x.ItemTaxRate
	}
	return 0
}

func (x *Bill) GetItemTaxAmount() float64 {
	if x != nil {
		return x.ItemTaxAmount
	}
	return 0
}

func (x *Bill) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *Bill) GetMemoryAddress() string {
	if x != nil {
		return x.MemoryAddress
	}
	return ""
}

func (x *Bill) GetHandlingPerson() string {
	if x != nil {
		return x.HandlingPerson
	}
	return ""
}

func (x *Bill) GetChecker() string {
	if x != nil {
		return x.Checker
	}
	return ""
}

type BillStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillNumber string `protobuf:"bytes,1,opt,name=bill_number,json=billNumber,proto3" json:"bill_number,omitempty"`
	Status     string `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *BillStatus) Reset() {
	*x = BillStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillStatus) ProtoMessage() {}

func (x *BillStatus) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillStatus.ProtoReflect.Descriptor instead.
func (*BillStatus) Descriptor() ([]byte, []int) {
	return file_rpc_server_proto_rawDescGZIP(), []int{2}
}

func (x *BillStatus) GetBillNumber() string {
	if x != nil {
		return x.BillNumber
	}
	return ""
}

func (x *BillStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type RpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Data    *Bills `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	Detail  string `protobuf:"bytes,4,opt,name=Detail,proto3" json:"Detail,omitempty"`
}

func (x *RpcResponse) Reset() {
	*x = RpcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcResponse) ProtoMessage() {}

func (x *RpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcResponse.ProtoReflect.Descriptor instead.
func (*RpcResponse) Descriptor() ([]byte, []int) {
	return file_rpc_server_proto_rawDescGZIP(), []int{3}
}

func (x *RpcResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RpcResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RpcResponse) GetData() *Bills {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RpcResponse) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type Bills struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bills []*Bill `protobuf:"bytes,1,rep,name=Bills,proto3" json:"Bills,omitempty"`
}

func (x *Bills) Reset() {
	*x = Bills{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bills) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bills) ProtoMessage() {}

func (x *Bills) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bills.ProtoReflect.Descriptor instead.
func (*Bills) Descriptor() ([]byte, []int) {
	return file_rpc_server_proto_rawDescGZIP(), []int{4}
}

func (x *Bills) GetBills() []*Bill {
	if x != nil {
		return x.Bills
	}
	return nil
}

type BillNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillNumber string `protobuf:"bytes,1,opt,name=bill_number,json=billNumber,proto3" json:"bill_number,omitempty"`
}

func (x *BillNumber) Reset() {
	*x = BillNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillNumber) ProtoMessage() {}

func (x *BillNumber) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillNumber.ProtoReflect.Descriptor instead.
func (*BillNumber) Descriptor() ([]byte, []int) {
	return file_rpc_server_proto_rawDescGZIP(), []int{5}
}

func (x *BillNumber) GetBillNumber() string {
	if x != nil {
		return x.BillNumber
	}
	return ""
}

type QueryBillWithPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryString string `protobuf:"bytes,1,opt,name=query_string,json=queryString,proto3" json:"query_string,omitempty"`
	PageSize    int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	BookMark    string `protobuf:"bytes,3,opt,name=book_mark,json=bookMark,proto3" json:"book_mark,omitempty"`
}

func (x *QueryBillWithPage) Reset() {
	*x = QueryBillWithPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBillWithPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBillWithPage) ProtoMessage() {}

func (x *QueryBillWithPage) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBillWithPage.ProtoReflect.Descriptor instead.
func (*QueryBillWithPage) Descriptor() ([]byte, []int) {
	return file_rpc_server_proto_rawDescGZIP(), []int{6}
}

func (x *QueryBillWithPage) GetQueryString() string {
	if x != nil {
		return x.QueryString
	}
	return ""
}

func (x *QueryBillWithPage) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryBillWithPage) GetBookMark() string {
	if x != nil {
		return x.BookMark
	}
	return ""
}

type BillWithBookMark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookMark string  `protobuf:"bytes,1,opt,name=BookMark,proto3" json:"BookMark,omitempty"`
	Data     []*Bill `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *BillWithBookMark) Reset() {
	*x = BillWithBookMark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillWithBookMark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillWithBookMark) ProtoMessage() {}

func (x *BillWithBookMark) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillWithBookMark.ProtoReflect.Descriptor instead.
func (*BillWithBookMark) Descriptor() ([]byte, []int) {
	return file_rpc_server_proto_rawDescGZIP(), []int{7}
}

func (x *BillWithBookMark) GetBookMark() string {
	if x != nil {
		return x.BookMark
	}
	return ""
}

func (x *BillWithBookMark) GetData() []*Bill {
	if x != nil {
		return x.Data
	}
	return nil
}

type RpcResponseWithPageMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32             `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Data    *BillWithBookMark `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	Detail  string            `protobuf:"bytes,4,opt,name=Detail,proto3" json:"Detail,omitempty"`
}

func (x *RpcResponseWithPageMeta) Reset() {
	*x = RpcResponseWithPageMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcResponseWithPageMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcResponseWithPageMeta) ProtoMessage() {}

func (x *RpcResponseWithPageMeta) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcResponseWithPageMeta.ProtoReflect.Descriptor instead.
func (*RpcResponseWithPageMeta) Descriptor() ([]byte, []int) {
	return file_rpc_server_proto_rawDescGZIP(), []int{8}
}

func (x *RpcResponseWithPageMeta) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RpcResponseWithPageMeta) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RpcResponseWithPageMeta) GetData() *BillWithBookMark {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RpcResponseWithPageMeta) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

var File_rpc_server_proto protoreflect.FileDescriptor

var file_rpc_server_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8d, 0x09, 0x0a, 0x04, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x6f, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x6f, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6c, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6c,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x5f, 0x61, 0x63,
	0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x41, 0x63, 0x63,
	0x74, 0x12, 0x1a, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x5f, 0x6f, 0x70, 0x5f, 0x62, 0x6b, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x4f, 0x70, 0x42, 0x6b, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x5f, 0x62, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x70, 0x42, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x55, 0x6e,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x61,
	0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69, 0x74,
	0x65, 0x6d, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x22, 0x45, 0x0a, 0x0a, 0x42, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6f, 0x0a, 0x0b,
	0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x52,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x24, 0x0a,
	0x05, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x05, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x05, 0x42, 0x69,
	0x6c, 0x6c, 0x73, 0x22, 0x2d, 0x0a, 0x0a, 0x42, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x70, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b,
	0x4d, 0x61, 0x72, 0x6b, 0x22, 0x49, 0x0a, 0x10, 0x42, 0x69, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x42, 0x6f, 0x6f, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b,
	0x4d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x6f, 0x6f, 0x6b,
	0x4d, 0x61, 0x72, 0x6b, 0x12, 0x19, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x05, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x86, 0x01, 0x0a, 0x17, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x57, 0x69,
	0x74, 0x68, 0x42, 0x6f, 0x6f, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x32, 0x8a, 0x02, 0x0a, 0x09, 0x52, 0x70, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x49, 0x6e, 0x69, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x05, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x1a,
	0x0c, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x0f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x69, 0x6c, 0x6c,
	0x12, 0x0f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x0c, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x16, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x2e, 0x42, 0x69, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x0c, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x0b, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x0c, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x12, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x69, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x52, 0x70,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x0c, 0x5a, 0x0a, 0x2f, 0x72, 0x70, 0x63, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_server_proto_rawDescOnce sync.Once
	file_rpc_server_proto_rawDescData = file_rpc_server_proto_rawDesc
)

func file_rpc_server_proto_rawDescGZIP() []byte {
	file_rpc_server_proto_rawDescOnce.Do(func() {
		file_rpc_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_server_proto_rawDescData)
	})
	return file_rpc_server_proto_rawDescData
}

var file_rpc_server_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_rpc_server_proto_goTypes = []interface{}{
	(*QueryCondition)(nil),          // 0: QueryCondition
	(*Bill)(nil),                    // 1: Bill
	(*BillStatus)(nil),              // 2: BillStatus
	(*RpcResponse)(nil),             // 3: RpcResponse
	(*Bills)(nil),                   // 4: Bills
	(*BillNumber)(nil),              // 5: BillNumber
	(*QueryBillWithPage)(nil),       // 6: QueryBillWithPage
	(*BillWithBookMark)(nil),        // 7: BillWithBookMark
	(*RpcResponseWithPageMeta)(nil), // 8: RpcResponseWithPageMeta
}
var file_rpc_server_proto_depIdxs = []int32{
	4, // 0: RpcResponse.Data:type_name -> Bills
	1, // 1: Bills.Bills:type_name -> Bill
	1, // 2: BillWithBookMark.Data:type_name -> Bill
	7, // 3: RpcResponseWithPageMeta.Data:type_name -> BillWithBookMark
	1, // 4: RpcServer.HandleInitBill:input_type -> Bill
	0, // 5: RpcServer.HandleQueryBill:input_type -> QueryCondition
	2, // 6: RpcServer.HandleUpdateBillStatus:input_type -> BillStatus
	5, // 7: RpcServer.HandleDeleteBill:input_type -> BillNumber
	6, // 8: RpcServer.HandleQueryBills:input_type -> QueryBillWithPage
	3, // 9: RpcServer.HandleInitBill:output_type -> RpcResponse
	3, // 10: RpcServer.HandleQueryBill:output_type -> RpcResponse
	3, // 11: RpcServer.HandleUpdateBillStatus:output_type -> RpcResponse
	3, // 12: RpcServer.HandleDeleteBill:output_type -> RpcResponse
	8, // 13: RpcServer.HandleQueryBills:output_type -> RpcResponseWithPageMeta
	9, // [9:14] is the sub-list for method output_type
	4, // [4:9] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_rpc_server_proto_init() }
func file_rpc_server_proto_init() {
	if File_rpc_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bills); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryBillWithPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillWithBookMark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcResponseWithPageMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_server_proto_goTypes,
		DependencyIndexes: file_rpc_server_proto_depIdxs,
		MessageInfos:      file_rpc_server_proto_msgTypes,
	}.Build()
	File_rpc_server_proto = out.File
	file_rpc_server_proto_rawDesc = nil
	file_rpc_server_proto_goTypes = nil
	file_rpc_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RpcServerClient is the client API for RpcServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcServerClient interface {
	HandleInitBill(ctx context.Context, in *Bill, opts ...grpc.CallOption) (*RpcResponse, error)
	HandleQueryBill(ctx context.Context, in *QueryCondition, opts ...grpc.CallOption) (*RpcResponse, error)
	HandleUpdateBillStatus(ctx context.Context, in *BillStatus, opts ...grpc.CallOption) (*RpcResponse, error)
	HandleDeleteBill(ctx context.Context, in *BillNumber, opts ...grpc.CallOption) (*RpcResponse, error)
	HandleQueryBills(ctx context.Context, in *QueryBillWithPage, opts ...grpc.CallOption) (*RpcResponseWithPageMeta, error)
}

type rpcServerClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcServerClient(cc grpc.ClientConnInterface) RpcServerClient {
	return &rpcServerClient{cc}
}

func (c *rpcServerClient) HandleInitBill(ctx context.Context, in *Bill, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/RpcServer/HandleInitBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcServerClient) HandleQueryBill(ctx context.Context, in *QueryCondition, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/RpcServer/HandleQueryBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcServerClient) HandleUpdateBillStatus(ctx context.Context, in *BillStatus, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/RpcServer/HandleUpdateBillStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcServerClient) HandleDeleteBill(ctx context.Context, in *BillNumber, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, "/RpcServer/HandleDeleteBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcServerClient) HandleQueryBills(ctx context.Context, in *QueryBillWithPage, opts ...grpc.CallOption) (*RpcResponseWithPageMeta, error) {
	out := new(RpcResponseWithPageMeta)
	err := c.cc.Invoke(ctx, "/RpcServer/HandleQueryBills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcServerServer is the server API for RpcServer service.
type RpcServerServer interface {
	HandleInitBill(context.Context, *Bill) (*RpcResponse, error)
	HandleQueryBill(context.Context, *QueryCondition) (*RpcResponse, error)
	HandleUpdateBillStatus(context.Context, *BillStatus) (*RpcResponse, error)
	HandleDeleteBill(context.Context, *BillNumber) (*RpcResponse, error)
	HandleQueryBills(context.Context, *QueryBillWithPage) (*RpcResponseWithPageMeta, error)
}

// UnimplementedRpcServerServer can be embedded to have forward compatible implementations.
type UnimplementedRpcServerServer struct {
}

func (*UnimplementedRpcServerServer) HandleInitBill(context.Context, *Bill) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleInitBill not implemented")
}
func (*UnimplementedRpcServerServer) HandleQueryBill(context.Context, *QueryCondition) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleQueryBill not implemented")
}
func (*UnimplementedRpcServerServer) HandleUpdateBillStatus(context.Context, *BillStatus) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleUpdateBillStatus not implemented")
}
func (*UnimplementedRpcServerServer) HandleDeleteBill(context.Context, *BillNumber) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleDeleteBill not implemented")
}
func (*UnimplementedRpcServerServer) HandleQueryBills(context.Context, *QueryBillWithPage) (*RpcResponseWithPageMeta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleQueryBills not implemented")
}

func RegisterRpcServerServer(s *grpc.Server, srv RpcServerServer) {
	s.RegisterService(&_RpcServer_serviceDesc, srv)
}

func _RpcServer_HandleInitBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServerServer).HandleInitBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpcServer/HandleInitBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServerServer).HandleInitBill(ctx, req.(*Bill))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcServer_HandleQueryBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCondition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServerServer).HandleQueryBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpcServer/HandleQueryBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServerServer).HandleQueryBill(ctx, req.(*QueryCondition))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcServer_HandleUpdateBillStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServerServer).HandleUpdateBillStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpcServer/HandleUpdateBillStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServerServer).HandleUpdateBillStatus(ctx, req.(*BillStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcServer_HandleDeleteBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServerServer).HandleDeleteBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpcServer/HandleDeleteBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServerServer).HandleDeleteBill(ctx, req.(*BillNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcServer_HandleQueryBills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBillWithPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServerServer).HandleQueryBills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpcServer/HandleQueryBills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServerServer).HandleQueryBills(ctx, req.(*QueryBillWithPage))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RpcServer",
	HandlerType: (*RpcServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleInitBill",
			Handler:    _RpcServer_HandleInitBill_Handler,
		},
		{
			MethodName: "HandleQueryBill",
			Handler:    _RpcServer_HandleQueryBill_Handler,
		},
		{
			MethodName: "HandleUpdateBillStatus",
			Handler:    _RpcServer_HandleUpdateBillStatus_Handler,
		},
		{
			MethodName: "HandleDeleteBill",
			Handler:    _RpcServer_HandleDeleteBill_Handler,
		},
		{
			MethodName: "HandleQueryBills",
			Handler:    _RpcServer_HandleQueryBills_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc-server.proto",
}
